type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: String!
  likes: [Like] @hasMany
  posts: [Post] @hasMany
  friends: [Friendship] @hasMany
  sentFriendRequests: [FriendRequest] @hasMany
  receivedFriendRequests: [FriendRequest] @hasMany
}

type Friendship @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  friend: User @belongsTo
}

type FriendRequest @model @auth(rules: [{allow: public}]) {
  id: ID!
  sender: User! @belongsTo
  recipient: User! @belongsTo
  status: String!
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  likes: [Like] @hasMany
  comments: [Comment] @hasMany
  user: User @belongsTo
  userPostsId: String!

  spotifyAlbumId: ID
  spotifyAlbumName: String
  spotifyAlbumType: String
  spotifyAlbumImageUrl: String
  spotifyAlbumReleaseDate: String
  spotifyAlbumArtists: String
  spotifyAlbumTotalTracks: String

  spotifyTrackId: ID
  spotifyTrackName: String
  spotifyTrackAlbumName: String
  spotifyTrackImageUrl: String
  spotifyTrackArtists: String

  scTrackId: ID
  scTrackTitle: String
  scTrackArtworkUrl: String
  scTrackUserId: ID
  scTrackUsername: String
  scTrackLikes: Int
  scTrackGenre: String
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  post: Post @belongsTo
  content: String!
  likes: [Like] @hasMany
}

type Like @model @auth(rules: [{allow: public}]) {
  id: ID!
  post: Post @belongsTo
  user: User @belongsTo
}
 