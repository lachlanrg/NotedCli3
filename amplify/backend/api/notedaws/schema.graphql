type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: String!
  likes: [Like] @hasMany
  posts: [Post] @hasMany
  friends: [Friendship] @hasMany
  sentFriendRequests: [FriendRequest] @hasMany
  receivedFriendRequests: [FriendRequest] @hasMany
  comments: [Comment] @hasMany
}

type Friendship @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  friend: User @belongsTo
}

type FriendRequest @model @auth(rules: [{allow: public}]) {
  id: ID!
  sender: User! @belongsTo
  recipient: User! @belongsTo
  status: String!
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  comments: [Comment] @hasMany
  user: User @belongsTo
  userPostsId: String!

  likedBy: [ID!]    # Array of user IDs who liked this post
  likesCount: Int!  # Total number of likes (initialize to 0 in your database)

  spotifyAlbumId: ID
  spotifyAlbumName: String
  spotifyAlbumType: String
  spotifyAlbumImageUrl: String
  spotifyAlbumReleaseDate: String
  spotifyAlbumArtists: String
  spotifyAlbumTotalTracks: String
  spotifyAlbumExternalUrl: String

  spotifyTrackId: ID
  spotifyTrackName: String
  spotifyTrackAlbumName: String
  spotifyTrackImageUrl: String
  spotifyTrackArtists: String
  spotifyTrackPreviewUrl: String
  spotifyTrackExternalUrl: String

  scTrackId: ID
  scTrackTitle: String
  scTrackArtworkUrl: String
  scTrackUserId: ID
  scTrackUsername: String
  scTrackLikes: Int
  scTrackGenre: String
  scTrackPermalinkUrl: String
  scTrackWaveformUrl: String
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  post: Post @belongsTo
  postId: String!
  content: String!
  likedBy: [ID!]
  likesCount: Int!
  user: User @belongsTo
  userPostsId: String!
}

type Like @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  postId: String!
  userLikesId: String!
}
 