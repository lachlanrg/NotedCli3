type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: String!
  posts: [Post] @hasMany
  friends: [Friendship] @hasMany
  sentFriendRequests: [FriendRequest] @hasMany
  receivedFriendRequests: [FriendRequest] @hasMany
  comments: [Comment] @hasMany
  publicProfile: Boolean
  reposts: [Repost] @hasMany 
  spotifyRecentlyPlayedTrack: [SpotifyRecentlyPlayedTrack] @hasMany
  recentlyPlayedDisabled: Boolean
  spotifyTokens: [SpotifyTokens] @hasMany
  spotifyUri: String
  spotifyImage: String
  soundCloudUri: String
  userDeviceTokens: [UserDeviceToken] @hasMany
  notificationSettings: NotificationSettings @hasOne
  spotifyPlaylists: [SpotifyPlaylist] @hasMany
}

type SpotifyPlaylist @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  user: User @belongsTo
  userSpotifyPlaylistsId: ID!
  username: String!
  type: String!
  spotifyPlaylistId: String! @index(name: "bySpotifyPlaylistId", queryField: "spotifyPlaylistBySpotifyPlaylistId")
  spotifyUserId: String
  spotifyExternalUrl: String
  imageUrl: String
  tracks: Int
  followers: Int
  likedBy: [ID!]
  likesCount: Int!
  comments: [Comment] @hasMany
  trackLimitPerUser: String
  userTracks: [UserPlaylistTrack] @hasMany
  genres: [String]
}

type Friendship @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  friend: User @belongsTo
}

type FriendRequest @model @auth(rules: [{allow: public}]) {
  id: ID!
  sender: User! @belongsTo
  recipient: User! @belongsTo
  status: String!
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  comments: [Comment] @hasMany
  user: User @belongsTo
  userPostsId: String!
  username: String!

  likedBy: [ID!]
  likesCount: Int!

  reposts: [Repost] @hasMany

  spotifyAlbumId: ID
  spotifyAlbumName: String
  spotifyAlbumType: String
  spotifyAlbumImageUrl: String
  spotifyAlbumReleaseDate: String
  spotifyAlbumArtists: String
  spotifyAlbumTotalTracks: String
  spotifyAlbumExternalUrl: String

  spotifyTrackId: ID
  spotifyTrackName: String
  spotifyTrackAlbumName: String
  spotifyTrackImageUrl: String
  spotifyTrackArtists: String
  spotifyTrackPreviewUrl: String
  spotifyTrackExternalUrl: String
  spotifyTrackReleaseDate: String
  spotifyTrackDurationMs: Int
  spotifyTrackExplicit: Boolean

  scTrackId: ID
  scTrackTitle: String
  scTrackArtworkUrl: String
  scTrackUserId: ID
  scTrackUsername: String
  scTrackLikes: Int
  scTrackArtist: String
  scTrackGenre: String
  scTrackPermalinkUrl: String
  scTrackWaveformUrl: String
  scTrackCreatedAt: String
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  post: Post @belongsTo
  postId: String
  repost: Repost @belongsTo
  repostId: String
  spotifyPlaylist: SpotifyPlaylist @belongsTo
  spotifyPlaylistId: String
  content: String!
  likedBy: [ID!]
  likesCount: Int!
  user: User @belongsTo
  userPostsId: String!
  username: String!
  parentComment: Comment @belongsTo
  parentCommentId: ID
  replies: [Comment] @hasMany
}

type Repost @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  originalPost: Post @belongsTo 
  user: User @belongsTo
  userRepostsId: String!
  userOriginalPostId: String!
  username: String!
  comments: [Comment] @hasMany
  likedBy: [ID!]
  likesCount: Int!
}

type SpotifyRecentlyPlayedTrack @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  userSpotifyRecentlyPlayedTrackId: ID @index(name: "byUser", sortKeyFields: ["playedAt"])
  spotifyId: ID
  trackId: String!
  trackName: String!
  artistName: String!
  albumName: String
  albumImageUrl: String
  playedAt: AWSDateTime!
  spotifyUri: String
}

type SpotifyTokens @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  userId: ID! @index(name: "byUserId", sortKeyFields: ["id"])
  spotifyUserId: ID!
  spotifyAccessToken: String!
  spotifyRefreshToken: String!
  tokenExpiration: Float!
}

type UserDeviceToken @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  userId: ID! @index(name: "byUserId")
  deviceTokens: [String]!
}

type SeenPost @model @auth(rules: [{ allow: public }]) {
  id: ID!
  itemId: ID! @index(name: "byItemId")
  userIds: [ID!]!
  itemType: String!
}

type Notification @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String!
  userId: ID! @index(name: "byUserId", sortKeyFields: ["createdAt"])
  actorId: ID!
  targetId: ID
  read: Boolean!
  message: String
  createdAt: AWSDateTime!
}

type NotificationSettings @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID! @index(name: "byUserId", sortKeyFields: ["id"])
  user: User @belongsTo(fields: ["userId"])
  likeEnabled: Boolean!
  commentEnabled: Boolean!
  followRequestEnabled: Boolean!
  repostEnabled: Boolean!
  commentLikeEnabled: Boolean!
  approvalEnabled: Boolean!
  inAppEnabled: Boolean!
}

type UserPlaylistTrack @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: ID! @index(name: "byUserId")
  playlistId: ID! @index(name: "byPlaylistId")
  trackCount: Int!
}
