type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  username: String!
  email: String!
  posts: [Post] @hasMany
  friends: [Friendship] @hasMany
  sentFriendRequests: [FriendRequest] @hasMany
  receivedFriendRequests: [FriendRequest] @hasMany
  comments: [Comment] @hasMany
  publicProfile: Boolean
  reposts: [Repost] @hasMany 
  spotifyRecentlyPlayedTrack: [SpotifyRecentlyPlayedTrack] @hasMany
  recentlyPlayedDisabled: Boolean
}

type Friendship @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  friend: User @belongsTo
}

type FriendRequest @model @auth(rules: [{allow: public}]) {
  id: ID!
  sender: User! @belongsTo
  recipient: User! @belongsTo
  status: String!
}

type Post @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  comments: [Comment] @hasMany
  user: User @belongsTo
  userPostsId: String!
  username: String!

  likedBy: [ID!]
  likesCount: Int!

  reposts: [Repost] @hasMany

  spotifyAlbumId: ID
  spotifyAlbumName: String
  spotifyAlbumType: String
  spotifyAlbumImageUrl: String
  spotifyAlbumReleaseDate: String
  spotifyAlbumArtists: String
  spotifyAlbumTotalTracks: String
  spotifyAlbumExternalUrl: String

  spotifyTrackId: ID
  spotifyTrackName: String
  spotifyTrackAlbumName: String
  spotifyTrackImageUrl: String
  spotifyTrackArtists: String
  spotifyTrackPreviewUrl: String
  spotifyTrackExternalUrl: String
  spotifyTrackReleaseDate: String
  spotifyTrackDurationMs: Int
  spotifyTrackExplicit: Boolean

  scTrackId: ID
  scTrackTitle: String
  scTrackArtworkUrl: String
  scTrackUserId: ID
  scTrackUsername: String
  scTrackLikes: Int
  scTrackArtist: String
  scTrackGenre: String
  scTrackPermalinkUrl: String
  scTrackWaveformUrl: String
  scTrackCreatedAt: String
}

type Comment @model @auth(rules: [{allow: public}]) {
  id: ID!
  post: Post @belongsTo
  postId: String
  repost: Repost @belongsTo
  repostId: String
  content: String!
  likedBy: [ID!]
  likesCount: Int!
  user: User @belongsTo
  userPostsId: String!
  username: String!
  parentComment: Comment @belongsTo
  parentCommentId: ID
  replies: [Comment] @hasMany
}

type Repost @model @auth(rules: [{allow: public}]) {
  id: ID!
  body: String
  originalPost: Post @belongsTo 
  user: User @belongsTo
  userRepostsId: String!
  userOriginalPostId: String!
  username: String!
  comments: [Comment] @hasMany
  likedBy: [ID!]
  likesCount: Int!
}

type SpotifyRecentlyPlayedTrack @model @auth(rules: [{allow: public}]) {
  id: ID!
  user: User @belongsTo
  userSpotifyRecentlyPlayedTrackId: ID @index(name: "byUser", sortKeyFields: ["playedAt"])
  spotifyId: ID
  trackId: String!
  trackName: String!
  artistName: String!
  albumName: String
  albumImageUrl: String
  playedAt: AWSDateTime!
  spotifyUri: String
}